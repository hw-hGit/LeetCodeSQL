Table: Person

+-------------+---------+
| Column Name | Type    |
+-------------+---------+
| id          | int     |
| email       | varchar |
+-------------+---------+
id is the primary key (column with unique values) for this table.
Each row of this table contains an email. The emails will not contain uppercase letters.
 

Write a solution to delete all duplicate emails, keeping only one unique email with the smallest id.

For SQL users, please note that you are supposed to write a DELETE statement and not a SELECT one.

For Pandas users, please note that you are supposed to modify Person in place.

After running your script, the answer shown is the Person table. The driver will first compile and run your piece of code and then show the Person table. The final order of the Person table does not matter.

The result format is in the following example.

Difficulty:
The problem involves removing duplicate emails from the "Person" table while retaining the instance with the smallest ID. The main challenge is to formulate an SQL DELETE statement that identifies duplicates based on emails, compares their IDs, and preserves the one with the smallest ID.
The difficulty lies in effectively combining these operations to achieve the desired outcome without compromising the table's integrity.

Solution:
To delete duplicate emails while keeping the one with the smallest ID, use a DELETE statement with a self-join based on emails and IDs.

Code:
DELETE p1
FROM Person p1
JOIN Person p2 ON p1.email = p2.email AND p1.id > p2.id;
