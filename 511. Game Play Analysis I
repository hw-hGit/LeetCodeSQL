Table: Activity

+--------------+---------+
| Column Name  | Type    |
+--------------+---------+
| player_id    | int     |
| device_id    | int     |
| event_date   | date    |
| games_played | int     |
+--------------+---------+
(player_id, event_date) is the primary key (combination of columns with unique values) of this table.
This table shows the activity of players of some games.
Each row is a record of a player who logged in and played a number of games (possibly 0) before logging out on someday using some device.
 

Write a solution to find the first login date for each player.

Return the result table in any order.

The result format is in the following example.

Difficulty:
The task involves determining the first login date for each player from the "Activity" table. The challenge is to create an SQL query that effectively identifies the earliest login date for each player while handling multiple entries for each player and their corresponding event dates.
Properly utilizing aggregate functions, grouping, and ordering forms the primary difficulty in solving this problem.

Solution:
To find the first login date for each player, use an SQL query that employs the MIN() function to aggregate the earliest event date for each player.

Code:
SELECT
    a.player_id, min(event_date) as first_login
FROM 
    Activity as a
GROUP BY 
    a.player_id 
